buildscript {
    ext {
        springBootVersion = '2.0.0.RELEASE'
    }
    repositories {
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.5'
        classpath 'io.franzbecker:gradle-lombok:1.10'
    }
}

allprojects {
    apply plugin: 'java'
    group 'edu.noia.myoffice'
    version = '0.0.17'
    repositories {
        jcenter()
        mavenLocal()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
        maven { url "http://repo.spring.io/milestone/" }
        maven {
            name 'mavenRemote'
            url myMavenRepoReadUrl
            credentials {
                username myMavenRepoReadUsername
                password myMavenRepoReadPassword
            }
        }
    }
}

gradle.taskGraph.whenReady { graph ->
    def badTasks = ['startScripts', 'distTar', 'distZip']
    graph.allTasks.findAll { it.name in badTasks }.each { task ->
        task.enabled = false
    }
}

subprojects {
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'maven-publish'
    apply plugin: 'org.sonarqube'
    apply plugin: 'io.franzbecker.gradle-lombok'
    sourceCompatibility = 1.8
    ext {
        myofficeCommonVersion = '0.0.14'
        springBootAdminVersion = '2.0.0-SNAPSHOT'
        springCloudVersion = 'Finchley.M9'
        springHalBrowserVersion = '3.0.3.RELEASE'
        springfoxVersion = '2.8.0'
        lombokVersion = '1.16.18'
        mokitoVersion = '2.8.47'
        jacksonVersion = '2.9.2'
        axonVersion = '3.2'
        h2DatabaseVersion = '1.4.196'
        hsqlDatabaseVersion = '2.4.0'
        flywayVersion = '5.0.7'
    }
    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }
    dependencies {
        compileOnly("org.projectlombok:lombok:${lombokVersion}")
        testCompile("org.mockito:mockito-core:${mokitoVersion}")
        testCompile 'org.springframework.boot:spring-boot-starter-test'
    }
    publishing {
        repositories {
            mavenLocal()
            maven {
                name 'mavenRemote'
                url myMavenRepoWriteUrl
                credentials {
                    username myMavenRepoWriteUsername
                    password myMavenRepoWritePassword
                }
            }
        }
        publications {
            mavenJava(MavenPublication) {
                from components.java
            }
        }
    }
    lombok {
        version = "${lombokVersion}"
        sha256 = "" // skip verify Lombok task
    }
    task install(dependsOn: publishToMavenLocal)
    task deploy(dependsOn: publish)

    bootJar.enabled = false
    jar.enabled = true
}

project(':myoffice-sale-common') {
    dependencies {
        compile project(':myoffice-sale-domain')
    }
}

project(':myoffice-sale-batch') {
    dependencies {
        compile project(':myoffice-sale-domain'),
                project(':myoffice-sale-query-data')
    }
}

project(':myoffice-sale-command') {
    dependencies {
        compile project(':myoffice-sale-common')
    }
}

project(':myoffice-sale-command-data') {
    dependencies {
        compile project(':myoffice-sale-command')
    }
}

project(':myoffice-sale-query') {
    dependencies {
        compile project(':myoffice-sale-common')
    }
}

project(':myoffice-sale-query-data') {
    dependencies {
        compile project(':myoffice-sale-query')
    }
}

project(':myoffice-sale-messaging') {
    dependencies {
        compile project(':myoffice-sale-domain')
    }
}

project(':myoffice-sale-rest') {
    dependencies {
        compile project(':myoffice-sale-common')
        compile project(':myoffice-sale-query-data')
    }
}

project(':myoffice-sale-application') {
    dependencies {
        compile project(':myoffice-sale-common'),
                project(':myoffice-sale-command'),
                project(':myoffice-sale-command-data'),
                project(':myoffice-sale-query'),
                project(':myoffice-sale-query-data'),
                project(':myoffice-sale-messaging'),
                project(':myoffice-sale-rest')
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.2'
}